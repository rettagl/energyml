<?xml version="1.0" encoding="utf-8"?>
<xs:schema targetNamespace="http://www.energistics.org/energyml/data/resqmlv2" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:resqml="http://www.energistics.org/energyml/data/resqmlv2" xmlns:eml="http://www.energistics.org/energyml/data/commonv2" elementFormDefault="qualified" version="2.1">
	<!--														-->
	<!-- Energistics License Agreement
			This file is distributed under the Energistics Product License Agreement at
			http://www.energistics.org/product-license-agreement
			Use of this file constitutes agreement with the Energistics Product License Agreement.
			Copyright (c) 2016 Energistics. All rights reserved.
			Energistics, WITSML, PRODML and RESQML are trademarks or registered trademarks of Energistics.
			-->
	<!--														-->
	<xs:annotation>
		<xs:documentation>This package contains the main classes used to define and exchange representation data in RESQML. Other packages in RESQML also define representations and may leverage objects in this Representation package; those other packages include:

	- Grids
	- Structural
	- Wells
	- Seismic
	- Streamlines

A representation refers to a digital description of a feature or interpretation. For example, currently in RESQML, a horizon interpretation may be represented by a point set, a set of triangulated surfaces, or a set of orthogonal grids.
A representation has two distinct and complementary roles in RESQML: 

	- It is an important component of the feature/interpretation/representation/property knowledge hierarchy where it corresponds to a 3D modeling expression of a feature that was initialized at the beginning of a business process. For example, the same horizon feature-interpretation can have a 2D grid representation or a triangulated set representation.


	- It supports the geometry and properties of data-objects in RESQML. The geometry of a representation is contained within the representation, while properties may be attached to the representation. Each property is “attached” to the indexable elements of a representation, which may be as simple as the nodes on a single triangulated surface or as complex as the cell, nodes, faces, pillars, coordinate lines, columns, etc., for a 3D grid.</xs:documentation>
	</xs:annotation>
	<!--														-->
	<xs:import namespace="http://www.energistics.org/energyml/data/commonv2" schemaLocation="../../../common/v2.1/xsd_schemas/EmlAllObjects.xsd"/>
	<!--														-->
	<xs:include schemaLocation="Structural.xsd"/>
	<xs:include schemaLocation="Grids.xsd"/>
	<xs:include schemaLocation="Geometry.xsd"/>
	<xs:include schemaLocation="Interpretations.xsd"/>
	<xs:complexType name="AbstractRepresentation" abstract="true">
		<xs:annotation>
			<xs:documentation>The parent class of all specialized digital descriptions, which may provide a representation of a feature interpretation or a technical feature. It may be either of these:

	- based on a topology and contains the geometry of this digital description.


	- based on the topology or the geometry of another representation.


Not all representations require a defined geometry. For example, a defined geometry is not required for block-centered grids or wellbore frames. For representations without geometry, a software writer may provide null (NaN) values in the local 3D CRS, which is mandatory.

TimeIndex is provided to describe time-dependent geometry.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractObject">
				<xs:sequence>
					<xs:element name="RepresentedInterpretation" type="eml:DataObjectReference" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ElementIdentity">
		<xs:annotation>
			<xs:documentation>Indicates the nature of the relationship between 2 or more representations, specifically if they are partially or totally identical. For possible types of relationships, see IdentityKind. 

Commonly used to identify contacts between representations in model descriptions. May also be used to relate the components of a grid (e.g., pillars) to those of a structural framework.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ElementIndices" type="eml:AbstractIntegerArray" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>Indicates which elements are identical based on their indices in the (sub)representation.
If not given, then the selected indexable elements of each of the selected representations are identical at the element by element level. 
BUSINESS RULE: The number of identical elements must be equal to identicalElementCount for each representation.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="IdentityKind" type="resqml:IdentityKind" minOccurs="1" maxOccurs="1"/>
			<xs:element name="IndexableElement" type="resqml:IndexableElement" minOccurs="1" maxOccurs="1"/>
			<xs:element name="Representation" type="eml:DataObjectReference" minOccurs="1" maxOccurs="1"/>
			<xs:element name="FromTimeIndex" type="eml:TimeIndex" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ToTimeIndex" type="eml:TimeIndex" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ElementIndices">
		<xs:annotation>
			<xs:documentation>Index into the indexable elements selected.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="1">
			<xs:element name="IndexableElement" type="resqml:IndexableElement" minOccurs="1" maxOccurs="1"/>
			<xs:element name="Indices" type="eml:AbstractIntegerArray" minOccurs="1" maxOccurs="1"/>
			<xs:element name="SupportingRepresentationIndex" type="eml:AbstractIntegerArray" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="IdentityKind">
		<xs:annotation>
			<xs:documentation>Enumeration of the identity kinds for the element identities (ElementIdentity).</xs:documentation>
		</xs:annotation>
		<xs:restriction base="eml:TypeEnum">
			<xs:enumeration value="collocation">
				<xs:annotation>
					<xs:documentation>A set of (sub)representations is collocated if there is bijection between the simple elements of all of the participating (sub)representations. This definition implies there is the same number of simple elements. 
NOTE: The geometric location of each set of simple elements mapped through the bijection is intended to be identical even if the numeric values of the associated geometries differ, i.e., due to loss of spatial resolution.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="previous collocation">
				<xs:annotation>
					<xs:documentation>The participating (sub)representations were collocated at some time in the geologic past—but not necessarily in the present day earth model.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="equivalence">
				<xs:annotation>
					<xs:documentation>A set of (sub)representations is equivalent if there is a map giving an association between some of the simple topological elements of the participating (sub)representations.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="previous equivalence">
				<xs:annotation>
					<xs:documentation>The participating (sub)representations were equivalent at some time in the geologic past—but not necessarily in the present day earth model.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="IndexableElement">
		<xs:annotation>
			<xs:documentation>Indexable elements for the different representations. The indexing of each element depends upon the specific representation.
To order and reference the elements of a representation, RESQML makes extensive use of the concept of indexing. Both one-dimensional and multi-dimensional arrays of elements are used. So that all elements may be referenced in a consistent and uniform fashion, each multi-dimensional index must have a well-defined 1D index.

Attributes below identify the IndexableElements, though not all elements apply to all types of representations. 

Indexable elements are used to:

	- attach geometry and properties to a representation.


	- identify portions of a representation when expressing a representation identity.


	- construct a sub-representation from an existing representation.


For the table of indexable elements and the representations to which they apply, see the RESQML Technical Usage Guide.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="eml:TypeEnum">
			<xs:enumeration value="cells"/>
			<xs:enumeration value="intervals from datum"/>
			<xs:enumeration value="column edges"/>
			<xs:enumeration value="columns"/>
			<xs:enumeration value="contacts"/>
			<xs:enumeration value="coordinate lines"/>
			<xs:enumeration value="edges"/>
			<xs:enumeration value="edges per column"/>
			<xs:enumeration value="enumerated elements"/>
			<xs:enumeration value="faces"/>
			<xs:enumeration value="faces per cell"/>
			<xs:enumeration value="interval edges">
				<xs:annotation>
					<xs:documentation>Count = NKL (column-layer grids, only)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="intervals"/>
			<xs:enumeration value="I0">
				<xs:annotation>
					<xs:documentation>Count = NI (IJK grids, only)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="I0 edges">
				<xs:annotation>
					<xs:documentation>Count = NIL (IJK grids, only)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="J0">
				<xs:annotation>
					<xs:documentation>Count = NJ (IJK grids, only)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="J0 edges">
				<xs:annotation>
					<xs:documentation>Count = NJL (IJK grids, only)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="layers">
				<xs:annotation>
					<xs:documentation>Count = NK  (column-layer grids, only)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="lines">
				<xs:annotation>
					<xs:documentation>Streamlines</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="nodes"/>
			<xs:enumeration value="nodes per cell"/>
			<xs:enumeration value="nodes per edge"/>
			<xs:enumeration value="nodes per face"/>
			<xs:enumeration value="patches"/>
			<xs:enumeration value="pillars"/>
			<xs:enumeration value="regions"/>
			<xs:enumeration value="representation"/>
			<xs:enumeration value="subnodes"/>
			<xs:enumeration value="triangles"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="Patch">
		<xs:annotation>
			<xs:documentation>A Patch is a mechanism in RESQML that provides a clear way of ordering indices to avoid ambiguity. For example, the representation of a horizon consists of 10 triangulated surfaces, to correctly represent the same horizon, the software importing or reading that horizon must know the indices within each of the 10 triangulated surfaces AND how the 10 triangulated surfaces are sequenced. 
Representations with unique indexing of their elements DO NOT require Patches. For example, a (lower order) corner-point grid has an indexing scheme that can be defined without using Patches. However, a RESQML general purpose (GP) grid (an unconstrained hybrid of any of the other RESQML grid types) is much more complex and variable, with no “natural” sequence. For a reader to correctly interpret a GP grid, the software that created the GP grid must:

	- Explicitly define each Patch (specify the indices) that comprise the grid.
	- Designate the correct order of the Patches.

If a representation includes indexable elements both specified within patches and external to patches, then Patch Index = 0 is defined to be the representation itself.
For more information, see the RESQML Technical Usage Guide.</xs:documentation>
		</xs:annotation>
		<xs:sequence/>
	</xs:complexType>
	<xs:complexType name="Patch1d">
		<xs:annotation>
			<xs:documentation>A patch with a single 1D index count.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="resqml:Patch">
				<xs:sequence>
					<xs:element name="Count" type="eml:PositiveLong" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Number of items in the patch.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PatchOfGeometry">
		<xs:annotation>
			<xs:documentation>Indicates which patch of the representation has a new geometry.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="RepresentationPatchIndex" type="eml:NonNegativeLong" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>Patch index for the geometry attachment, if required.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Geometry" type="resqml:AbstractGeometry" minOccurs="1" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PolylineSetPatch">
		<xs:annotation>
			<xs:documentation>A Patch containing a set of polylines.

For performance reasons, the geometry of each Patch is described in only one 1D array of 3D points, which aggregates the nodes of all the polylines together.

To be able to separate the polyline descriptions, additional information is added about the type of each polyline (closed or not) and the number of 3D points (node count) of each polyline. 

This additional information is contained in two arrays, which are associated with each polyline set patch. The dimension of these arrays is the number of polylines gathered in one polyline set patch. 

	- The first array contains a Boolean for each polyline (closed or not closed).
	- The second array contains the count of nodes for each polyline.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="resqml:Patch">
				<xs:sequence>
					<xs:element name="NodeCount" type="eml:PositiveLong" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Total number of nodes.

BUSINESS RULE: Should be equal to the sum of the number of nodes per polyline.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="IntervalCount" type="eml:NonNegativeLong" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Total number of intervals.

BUSINESS RULE: Should be equal to the sum of the count of intervals per polyline.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="NodeCountPerPolyline" type="eml:AbstractIntegerArray" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The first number in the list defines the node count for the first polyline in the polyline set patch.
The second number in the list defines the node count for the second polyline in the polyline set patch.
etc.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="ClosedPolylines" type="eml:AbstractBooleanArray" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Indicates whether a polyline is closed.

If closed, then the interval count for that polyline is equal to the node count.

If open, then the interval count for that polyline is one less than the node count.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="IntervalGridCells" type="resqml:IntervalGridCells" minOccurs="0" maxOccurs="1"/>
					<xs:element name="Geometry" type="resqml:PointGeometry" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="PolylineSetRepresentation" type="resqml:PolylineSetRepresentation" substitutionGroup="eml:AbstractDataObject"/>
	<xs:complexType name="PolylineSetRepresentation">
		<xs:annotation>
			<xs:documentation>A representation made up of a set of polylines or a set of polygonal chains (for more information, see PolylineRepresentation). 

For compactness, it is organized by line patch as a unique polyline set patch.

If allPolylineClosed = True, all the polylines are connected between the first and the last point.

Its geometry is a 1D array of points, corresponding to the concatenation of the points of all polyline points.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="resqml:AbstractRepresentation">
				<xs:sequence>
					<xs:element name="LineRole" type="resqml:LineRole" minOccurs="0" maxOccurs="1"/>
					<xs:element name="LinePatch" type="resqml:PolylineSetPatch" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="RedefinedGeometryRepresentation" type="resqml:RedefinedGeometryRepresentation" substitutionGroup="eml:AbstractDataObject"/>
	<xs:complexType name="RedefinedGeometryRepresentation">
		<xs:annotation>
			<xs:documentation>A representation derived from an existing representation by redefining its geometry. Example use cases include deformation of the geometry of an object, change of coordinate system, and change of time &lt;=&gt; depth.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="resqml:AbstractRepresentation">
				<xs:sequence>
					<xs:element name="PatchOfGeometry" type="resqml:PatchOfGeometry" minOccurs="1" maxOccurs="unbounded"/>
					<xs:element name="SupportingRepresentation" type="eml:DataObjectReference" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RepresentationIdentity">
		<xs:annotation>
			<xs:documentation>Indicates the nature of the relationship between 2 or more representations, specifically if they are partially or totally identical. For possible types of relationships, see IdentityKind.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="IdenticalElementCount" type="eml:PositiveLong" minOccurs="1" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>Number of elements within each representation for which a representation identity is specified.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="AdditionalGridTopology" type="resqml:AdditionalGridTopology" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ElementIdentity" type="resqml:ElementIdentity" minOccurs="2" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="RepresentationIdentitySet" type="resqml:RepresentationIdentitySet" substitutionGroup="eml:AbstractDataObject"/>
	<xs:complexType name="RepresentationIdentitySet">
		<xs:annotation>
			<xs:documentation>A collection of representation identities.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractObject">
				<xs:sequence>
					<xs:element name="RepresentationIdentity" type="resqml:RepresentationIdentity" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="RepresentationSetRepresentation" type="resqml:RepresentationSetRepresentation" substitutionGroup="eml:AbstractDataObject"/>
	<xs:complexType name="RepresentationSetRepresentation">
		<xs:annotation>
			<xs:documentation>The parent class of the framework representations. It is used to group together individual representations to represent a “bag” of representations. If the individual representations are all of the same, then you can indicate that the set is homogenous.
These “bags” do not imply any geologic consistency. For example, you can define a set of wellbore frames, a set of wellbore trajectories, a set of blocked wellbores. 
Because the framework representations inherit from this class, they inherit the capability to gather individual representations into sealed and non-sealed surface framework representations, or sealed volume framework representations.
For more information, see the RESQML Technical Usage Guide.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="resqml:AbstractRepresentation">
				<xs:sequence>
					<xs:element name="IsHomogeneous" type="xs:boolean" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Indicates that all of the selected representations are of a single kind.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Representation" type="eml:DataObjectReference" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="SubRepresentation" type="resqml:SubRepresentation" substitutionGroup="eml:AbstractDataObject"/>
	<xs:complexType name="SubRepresentation">
		<xs:annotation>
			<xs:documentation>An ordered list of indexable elements and/or indexable element pairs of an existing representation. 
Because the representation concepts of topology, geometry, and property values are separate in RESQML, it is now possible to select a range of nodes, edges, faces, or volumes (cell) indices from the topological support of an existing representation to define a sub-representation.
A sub-representation may describe a different feature interpretation using the same geometry or property as the "parent" representation. In this case, the only information exchanged is a set of potentially non-consecutive indices of the topological support of the representation.

Optional additional grid topology is available for grid representations.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="resqml:AbstractRepresentation">
				<xs:sequence>
					<xs:element name="AdditionalGridTopology" type="resqml:AdditionalGridTopology" minOccurs="0" maxOccurs="1"/>
					<xs:element name="SubRepresentationPatch" type="resqml:SubRepresentationPatch" minOccurs="1" maxOccurs="unbounded"/>
					<xs:element name="SupportingRepresentation" type="eml:DataObjectReference" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SubRepresentationPatch">
		<xs:annotation>
			<xs:documentation>Each sub-representation patch has its own list of representation indices, drawn from the supporting representation.

If a list of pairwise elements is required, use two ElementIndices. The count of elements (or pair of elements) is defined in SubRepresentationPatch.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="resqml:Patch1d">
				<xs:sequence>
					<xs:element name="ElementIndices" type="resqml:ElementIndices" minOccurs="1" maxOccurs="2"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
</xs:schema>
